{"ast":null,"code":"import _regeneratorRuntime from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.3.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    var nextAction = Action.Pop;\n    var nextIndex = getIndex();\n    if (nextIndex != null) {\n      var delta = nextIndex - index;\n      action = nextAction;\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: history.location,\n          delta: delta\n        });\n      }\n    } else {\n      warning$1(false,\n      // TODO: Write up a doc that explains our blocking strategy in detail\n      // and link to it here so people can understand better what is going on\n      // and how to avoid it.\n      \"You are trying to block a POP navigation to a location that was not \" + \"created by @remix-run/router. The block will fail silently in \" + \"production, but in general you should do all navigation with the \" + \"router (instead of using window.history.pushState directly) \" + \"to avoid this situation.\");\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  return path.replace(/^:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref12 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref12.pathname,\n    _ref12$search = _ref12.search,\n    search = _ref12$search === void 0 ? \"\" : _ref12$search,\n    _ref12$hash = _ref12.hash,\n    hash = _ref12$hash === void 0 ? \"\" : _ref12$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref13 = _slicedToArray(_ref, 2),\n        key = _ref13[0],\n        value = _ref13[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref14 = _slicedToArray(_ref2, 2),\n          key = _ref14[0],\n          value = _ref14[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n\n  var activeBlocker = null; // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n          key = _step2$value[0];\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 15;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                }); // Send the same navigation through\n\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                deleteBlocker(blockerKey);\n                updateState({\n                  blockers: new Map(state.blockers)\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 15:\n            _context2.next = 17;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 17:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 14;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 14:\n            if (!isHashChangeOnly(state.location, location)) {\n              _context3.next = 17;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 17:\n            // Create a controller/Request for this navigation\n\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 23;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 34;\n            break;\n          case 23:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 34;\n              break;\n            }\n            _context3.next = 26;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 26:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 29;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 29:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation; // Create a GET request for the loaders\n\n            request = new Request(request.url, {\n              signal: request.signal\n            });\n          case 34:\n            _context3.next = 36;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n          case 36:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 42;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 42:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: matches\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 44:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads(); // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            }); // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (actionMatch.route.action) {\n              _context4.next = 8;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 18;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              replace = result.location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 17;\n            return startRedirectNavigation(state, result, {\n              submission: submission,\n              replace: replace\n            });\n          case 17:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            if (!isErrorResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              // Send back an empty object we can use to clear out any prior actionData\n              pendingActionData: {},\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 22:\n            if (!isDeferredResult(result)) {\n              _context4.next = 24;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 24:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = _extends({\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission);\n              loadingNavigation = navigation;\n            } // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n              formMethod: loadingNavigation.formMethod,\n              formAction: loadingNavigation.formAction,\n              formData: loadingNavigation.formData,\n              formEncType: loadingNavigation.formEncType\n            } : undefined;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 8;\n              break;\n            }\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}));\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 8:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (_ref2) {\n                var _ref15 = _slicedToArray(_ref2, 1),\n                  key = _ref15[0];\n                var fetcher = state.fetchers.get(key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(key, revalidatingFetcher);\n              });\n              actionData = pendingActionData || state.actionData;\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData ? Object.keys(actionData).length === 0 ? {\n                actionData: null\n              } : {\n                actionData: actionData\n              } : {}, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (_ref3) {\n              var _ref16 = _slicedToArray(_ref3, 1),\n                key = _ref16[0];\n              return fetchControllers.set(key, pendingNavigationController);\n            });\n            _context5.next = 13;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 13:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 19;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 19:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n\n            revalidatingFetchers.forEach(function (_ref4) {\n              var _ref17 = _slicedToArray(_ref4, 1),\n                key = _ref17[0];\n              return fetchControllers.delete(key);\n            }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 25;\n              break;\n            }\n            _context5.next = 24;\n            return startRedirectNavigation(state, redirect, {\n              replace: replace\n            });\n          case 24:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 25:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 30:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (match.route.action) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 26;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n              isFetchActionRedirect: true\n            }));\n          case 26:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 31;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 31:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission, {\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined,\n            // No need to send through errors since we short circuit above\n            fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (_ref5) {\n              var _ref18 = _slicedToArray(_ref5, 1),\n                staleKey = _ref18[0];\n              return staleKey !== key;\n            }).forEach(function (_ref6) {\n              var _ref19 = _slicedToArray(_ref6, 1),\n                staleKey = _ref19[0];\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              fetchControllers.set(staleKey, abortController);\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            _context6.next = 44;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 44:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 50;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 50:\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (_ref7) {\n              var _ref20 = _slicedToArray(_ref7, 1),\n                staleKey = _ref20[0];\n              return fetchControllers.delete(staleKey);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 56;\n              break;\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n          case 56:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n            doneFetcher = {\n              state: \"idle\",\n              data: actionResult.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n              }, didAbortFetchLoads ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 61:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = _extends({\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 24;\n              break;\n            }\n            _context7.next = 23;\n            return startRedirectNavigation(state, result);\n          case 23:\n            return _context7.abrupt(\"return\");\n          case 24:\n            if (!isErrorResult(result)) {\n              _context7.next = 29;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 29:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 33:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref21, submission, replace, isFetchActionRedirect, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref21 = _temp === void 0 ? {} : _temp, submission = _ref21.submission, replace = _ref21.replace, isFetchActionRedirect = _ref21.isFetchActionRedirect;\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            redirectLocation = createLocation(state.location, redirect.location,\n            // TODO: This can be removed once we get rid of useTransition in Remix v2\n            _extends({\n              _isRedirect: true\n            }, isFetchActionRedirect ? {\n              _isFetchActionRedirect: true\n            } : {}));\n            invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an external redirect that goes to a new origin\n            if (!(isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n              _context8.next = 9;\n              break;\n            }\n            newOrigin = init.history.createURL(redirect.location).origin;\n            if (!(window.location.origin !== newOrigin)) {\n              _context8.next = 9;\n              break;\n            }\n            if (replace) {\n              window.location.replace(redirect.location);\n            } else {\n              window.location.assign(redirect.location);\n            }\n            return _context8.abrupt(\"return\");\n          case 9:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n            if (!submission && formMethod && formAction && formData && formEncType) {\n              submission = {\n                formMethod: formMethod,\n                formAction: formAction,\n                formEncType: formEncType,\n                formData: formData\n              };\n            } // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n              _context8.next = 18;\n              break;\n            }\n            _context8.next = 16;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, submission, {\n                formAction: redirect.location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 16:\n            _context8.next = 20;\n            break;\n          case 18:\n            _context8.next = 20;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: submission ? submission.formMethod : undefined,\n                formAction: submission ? submission.formAction : undefined,\n                formEncType: submission ? submission.formEncType : undefined,\n                formData: submission ? submission.formData : undefined\n              },\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 20:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n            })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n              var _ref22 = _slicedToArray(_ref8, 4),\n                href = _ref22[1],\n                match = _ref22[2],\n                fetchMatches = _ref22[3];\n              return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, href, request.signal), match, fetchMatches, router.basename);\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n              var _ref23 = _slicedToArray(_ref9, 3),\n                match = _ref23[2];\n              return match;\n            }), fetcherResults, request.signal, true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n          key = _step5$value[0],\n          id = _step5$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  } // Utility function to update blockers, ensuring valid state transitions\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref10) {\n    var currentLocation = _ref10.currentLocation,\n      nextLocation = _ref10.nextLocation,\n      historyAction = _ref10.historyAction;\n    if (activeBlocker == null) {\n      return;\n    } // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n\n    var blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(blockerFunction, \"Could not find a function for the active blocker\");\n    var blocker = state.blockers.get(activeBlocker);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return activeBlocker;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp2) {\n      var _ref24, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref24 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref24.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\")) {\n              _context10.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context10.next = 15;\n              break;\n            }\n            _error3 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error3),\n              statusCode: _error3.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context10.next = 17;\n            return queryImpl(request, location, matches, requestContext);\n          case 17:\n            result = _context10.sent;\n            if (!isResponse(result)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 20:\n            return _context10.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref25, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref25 = _temp3 === void 0 ? {} : _temp3, routeId = _ref25.routeId, requestContext = _ref25.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n              _context11.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context11.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context11.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context11.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context11.next = 20;\n            return queryImpl(request, location, matches, requestContext, match);\n          case 20:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 23;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context11.next = 28;\n              break;\n            }\n            return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context11.next = 32;\n              break;\n            }\n            data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context11.abrupt(\"return\", data);\n          case 32:\n            return _context11.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context12.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context12.next = 7;\n              break;\n            }\n            _context12.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          case 5:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", _result);\n          case 7:\n            _context12.next = 9;\n            return loadRouteData(request, matches, requestContext, routeMatch);\n          case 9:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context12.prev = 13;\n            _context12.t0 = _context12[\"catch\"](1);\n            if (!isQueryRouteResponse(_context12.t0)) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n              _context12.next = 18;\n              break;\n            }\n            throw _context12.t0.response;\n          case 18:\n            return _context12.abrupt(\"return\", _context12.t0.response);\n          case 19:\n            if (!isRedirectResponse(_context12.t0)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", _context12.t0);\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error4, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (actionMatch.route.action) {\n              _context14.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context14.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context14.next = 13;\n            break;\n          case 7:\n            _context14.next = 9;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n          case 9:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 15:\n            if (!isDeferredResult(result)) {\n              _context14.next = 20;\n              break;\n            }\n            _error4 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context14.next = 19;\n              break;\n            }\n            throw _error4;\n          case 19:\n            result = {\n              type: ResultType.error,\n              error: _error4\n            };\n          case 20:\n            if (!isRouteRequest) {\n              _context14.next = 24;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 23;\n              break;\n            }\n            throw result.error;\n          case 23:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 24:\n            if (!isErrorResult(result)) {\n              _context14.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 28;\n            return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n          case 28:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            _context14.next = 33;\n            return loadRouteData(loaderRequest, matches, requestContext);\n          case 33:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 35:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n              _context15.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 7;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context15.next = 9;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n            })));\n          case 9:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 18:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  var submission;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: getInternalRouterError(400)\n    };\n  }\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n    // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(history, state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref11, key) {\n    var _ref28 = _slicedToArray(_ref11, 3),\n      href = _ref28[0],\n      match = _ref28[1],\n      fetchMatches = _ref28[2];\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(history, href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(history, currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = history.createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = history.createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nfunction callLoaderOrAction(_x59, _x60, _x61, _x62, _x63, _x64, _x65, _x66) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, isAbsolute, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, data, contentType;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (basename === void 0) {\n            basename = \"/\";\n          }\n          if (isStaticRequest === void 0) {\n            isStaticRequest = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n          abortPromise = new Promise(function (_, r) {\n            return reject = r;\n          });\n          onReject = function onReject() {\n            return reject();\n          };\n          request.signal.addEventListener(\"abort\", onReject);\n          _context16.prev = 6;\n          handler = match.route[type];\n          invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n          _context16.next = 11;\n          return Promise.race([handler({\n            request: request,\n            params: match.params,\n            context: requestContext\n          }), abortPromise]);\n        case 11:\n          result = _context16.sent;\n          invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context16.next = 19;\n          break;\n        case 15:\n          _context16.prev = 15;\n          _context16.t0 = _context16[\"catch\"](6);\n          resultType = ResultType.error;\n          result = _context16.t0;\n        case 19:\n          _context16.prev = 19;\n          request.signal.removeEventListener(\"abort\", onReject);\n          return _context16.finish(19);\n        case 22:\n          if (!isResponse(result)) {\n            _context16.next = 48;\n            break;\n          }\n          status = result.status; // Process redirects\n          if (!redirectStatusCodes.has(status)) {\n            _context16.next = 33;\n            break;\n          }\n          location = result.headers.get(\"Location\");\n          invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n          isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location); // Support relative routing in internal redirects\n          if (!isAbsolute) {\n            activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n            routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n              return match.pathnameBase;\n            });\n            resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n            invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n            if (basename) {\n              path = resolvedLocation.pathname;\n              resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n            }\n            location = createPath(resolvedLocation);\n          } else if (!isStaticRequest) {\n            // Strip off the protocol+origin for same-origin absolute redirects.\n            // If this is a static reques, we can let it go back to the browser\n            // as-is\n            currentUrl = new URL(request.url);\n            url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n            if (url.origin === currentUrl.origin) {\n              location = url.pathname + url.search + url.hash;\n            }\n          } // Don't process redirects in the router during static requests requests.\n          // Instead, throw the Response and let the server handle it with an HTTP\n          // redirect.  We also update the Location header in place in this flow so\n          // basename and relative routing is taken into account\n          if (!isStaticRequest) {\n            _context16.next = 32;\n            break;\n          }\n          result.headers.set(\"Location\", location);\n          throw result;\n        case 32:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 33:\n          if (!isRouteRequest) {\n            _context16.next = 35;\n            break;\n          }\n          throw {\n            type: resultType || ResultType.data,\n            response: result\n          };\n        case 35:\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context16.next = 42;\n            break;\n          }\n          _context16.next = 39;\n          return result.json();\n        case 39:\n          data = _context16.sent;\n          _context16.next = 45;\n          break;\n        case 42:\n          _context16.next = 44;\n          return result.text();\n        case 44:\n          data = _context16.sent;\n        case 45:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 47;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 47:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 48:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 50;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 50:\n          if (!(result instanceof DeferredData)) {\n            _context16.next = 52;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result\n          });\n        case 52:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 53:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n      key = _revalidatingFetchers[0],\n      match = _revalidatingFetchers[2];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator7 = _createForOfIteratorHelper(matches),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined) {\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  var _ref29 = _temp4 === void 0 ? {} : _temp4,\n    pathname = _ref29.pathname,\n    routeId = _ref29.routeId,\n    method = _ref29.method,\n    type = _ref29.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\nfunction resolveDeferredResults(_x67, _x68, _x69, _x70, _x71, _x72) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader;\n            return _regeneratorRuntime().wrap(function _loop$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index];\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context17.next = 7;\n                    break;\n                  }\n                  _context17.next = 7;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 7:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          index++;\n          _context18.next = 2;\n          break;\n        case 7:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x73, _x74, _x75) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context19.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context19.sent;\n          if (!aborted) {\n            _context19.next = 6;\n            break;\n          }\n          return _context19.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context19.next = 14;\n            break;\n          }\n          _context19.prev = 7;\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context19.prev = 11;\n          _context19.t0 = _context19[\"catch\"](7);\n          return _context19.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context19.t0\n          });\n        case 14:\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","nextAction","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","explodeOptionalSegments","exploded","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","optional","param","prefix","__","str","star","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeysSet","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","activeBlocker","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","_extends","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","_window","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref10","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","onReject","handler","resultType","isAbsolute","activeMatches","resolvedLocation","protocol","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches"],"sources":["D:\\Projects\\React\\Portfolio\\GeneralStore\\client\\node_modules\\@remix-run\\router\\history.ts","D:\\Projects\\React\\Portfolio\\GeneralStore\\client\\node_modules\\@remix-run\\router\\utils.ts","D:\\Projects\\React\\Portfolio\\GeneralStore\\client\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    let nextAction = Action.Pop;\n    let nextIndex = getIndex();\n\n    if (nextIndex != null) {\n      let delta = nextIndex - index;\n      action = nextAction;\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: history.location, delta });\n      }\n    } else {\n      warning(\n        false,\n        // TODO: Write up a doc that explains our blocking strategy in detail\n        // and link to it here so people can understand better what is going on\n        // and how to avoid it.\n        `You are trying to block a POP navigation to a location that was not ` +\n          `created by @remix-run/router. The block will fail silently in ` +\n          `production, but in general you should do all navigation with the ` +\n          `router (instead of using window.history.pushState directly) ` +\n          `to avoid this situation.`\n      );\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n  let activeBlocker: string | null = null;\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n        if (blockerKey) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (isBrowser && typeof window?.location !== \"undefined\") {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (activeBlocker == null) {\n      return;\n    }\n\n    // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n    let blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(\n      blockerFunction,\n      \"Could not find a function for the active blocker\"\n    );\n    let blocker = state.blockers.get(activeBlocker);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return activeBlocker;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          history,\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          history,\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  history: History,\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = history.createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = history.createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location);\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}