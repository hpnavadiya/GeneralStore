{"ast":null,"code":"import _defineProperty from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toArray from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _slicedToArray from \"D:/Projects/React/Portfolio/GeneralStore/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\nimport warning from '../../_util/warning';\n// TODO: warning if use ajax!!!\nexport var SELECTION_COLUMN = {};\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\nexport var SELECTION_NONE = 'SELECT_NONE';\nvar EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelection, config) {\n  var _ref5 = rowSelection || {},\n    preserveSelectedRowKeys = _ref5.preserveSelectedRowKeys,\n    selectedRowKeys = _ref5.selectedRowKeys,\n    defaultSelectedRowKeys = _ref5.defaultSelectedRowKeys,\n    getCheckboxProps = _ref5.getCheckboxProps,\n    onSelectionChange = _ref5.onChange,\n    onSelect = _ref5.onSelect,\n    onSelectAll = _ref5.onSelectAll,\n    onSelectInvert = _ref5.onSelectInvert,\n    onSelectNone = _ref5.onSelectNone,\n    onSelectMultiple = _ref5.onSelectMultiple,\n    selectionColWidth = _ref5.columnWidth,\n    selectionType = _ref5.type,\n    selections = _ref5.selections,\n    fixed = _ref5.fixed,\n    customizeRenderCell = _ref5.renderCell,\n    hideSelectAll = _ref5.hideSelectAll,\n    _ref5$checkStrictly = _ref5.checkStrictly,\n    checkStrictly = _ref5$checkStrictly === void 0 ? true : _ref5$checkStrictly;\n  var prefixCls = config.prefixCls,\n    data = config.data,\n    pageData = config.pageData,\n    getRecordByKey = config.getRecordByKey,\n    getRowKey = config.getRowKey,\n    expandType = config.expandType,\n    childrenColumnName = config.childrenColumnName,\n    tableLocale = config.locale,\n    getPopupContainer = config.getPopupContainer;\n  // ========================= Keys =========================\n  var _useMergedState = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n      value: selectedRowKeys\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    mergedSelectedKeys = _useMergedState2[0],\n    setMergedSelectedKeys = _useMergedState2[1];\n  // ======================== Caches ========================\n  var preserveRecordsRef = React.useRef(new Map());\n  var updatePreserveRecordsCache = useCallback(function (keys) {\n    if (preserveSelectedRowKeys) {\n      var newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(function () {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  var _useMemo = useMemo(function () {\n      return checkStrictly ? {\n        keyEntities: null\n      } : convertDataToEntities(data, {\n        externalGetKey: getRowKey,\n        childrenPropName: childrenColumnName\n      });\n    }, [data, getRowKey, checkStrictly, childrenColumnName]),\n    keyEntities = _useMemo.keyEntities;\n  // Get flatten data\n  var flattedData = useMemo(function () {\n    return flattenData(childrenColumnName, pageData);\n  }, [pageData, childrenColumnName]);\n  // Get all checkbox props\n  var checkboxPropsMap = useMemo(function () {\n    var map = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  var isCheckboxDisabled = useCallback(function (r) {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  var _useMemo2 = useMemo(function () {\n      if (checkStrictly) {\n        return [mergedSelectedKeys || [], []];\n      }\n      var _conductCheck = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled),\n        checkedKeys = _conductCheck.checkedKeys,\n        halfCheckedKeys = _conductCheck.halfCheckedKeys;\n      return [checkedKeys || [], halfCheckedKeys];\n    }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]),\n    _useMemo3 = _slicedToArray(_useMemo2, 2),\n    derivedSelectedKeys = _useMemo3[0],\n    derivedHalfSelectedKeys = _useMemo3[1];\n  var derivedSelectedKeySet = useMemo(function () {\n    var keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  var derivedHalfSelectedKeySet = useMemo(function () {\n    return selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys);\n  }, [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastSelectedKey = _useState2[0],\n    setLastSelectedKey = _useState2[1];\n  // Reset if rowSelection reset\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = useCallback(function (keys, method) {\n    var availableKeys;\n    var records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(function (key) {\n        return preserveRecordsRef.current.get(key);\n      });\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(function (key) {\n        var record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  var triggerSingleSelection = useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = useMemo(function () {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n              var checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            var keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect: function onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(function (key) {\n              var checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(function (selection) {\n      return Object.assign(Object.assign({}, selection), {\n        onSelect: function onSelect() {\n          var _a2;\n          var _a;\n          for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n            rest[_key] = arguments[_key];\n          }\n          (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n          setLastSelectedKey(null);\n        }\n      });\n    });\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  var transformColumns = useCallback(function (columns) {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(function (col) {\n        return col !== SELECTION_COLUMN;\n      });\n    }\n    // >>>>>>>>>>> Support selection\n    var cloneColumns = _toConsumableArray(columns);\n    var keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      var keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n        return getRecordByKey(k);\n      }), changeKeys.map(function (k) {\n        return getRecordByKey(k);\n      }));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    var title;\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n      if (mergedSelections) {\n        var menu = {\n          getPopupContainer: getPopupContainer,\n          items: mergedSelections.map(function (selection, index) {\n            var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n            return {\n              key: key || index,\n              onClick: function onClick() {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      var allDisabledData = flattedData.map(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(function (_ref) {\n        var disabled = _ref.disabled;\n        return disabled;\n      });\n      var allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      var allDisabledAndChecked = allDisabled && allDisabledData.every(function (_ref2) {\n        var checked = _ref2.checked;\n        return checked;\n      });\n      var allDisabledSomeChecked = allDisabled && allDisabledData.some(function (_ref3) {\n        var checked = _ref3.checked;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    var renderCell;\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(event) {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var _a;\n        var key = getRowKey(record, index);\n        var checked = keySet.has(key);\n        var indeterminate = derivedHalfSelectedKeySet.has(key);\n        var checkboxProps = checkboxPropsMap.get(key);\n        var mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            },\n            onChange: function onChange(_ref4) {\n              var nativeEvent = _ref4.nativeEvent;\n              var shiftKey = nativeEvent.shiftKey;\n              var startIndex = -1;\n              var endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                var pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some(function (recordKey, recordIndex) {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                var changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(function (recordKey) {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                var keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                var originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  var checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  var result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  var _checkedKeys = result.checkedKeys,\n                    halfCheckedKeys = result.halfCheckedKeys;\n                  var nextCheckedKeys = _checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    var tempKeySet = new Set(_checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys: halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked: checked\n        };\n      };\n    }\n    var renderSelectionCell = function renderSelectionCell(_, record, index) {\n      var _renderCell = renderCell(_, record, index),\n        node = _renderCell.node,\n        checked = _renderCell.checked;\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(function (col) {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        var _cloneColumns = cloneColumns,\n          _cloneColumns2 = _toArray(_cloneColumns),\n          expandColumn = _cloneColumns2[0],\n          restColumns = _cloneColumns2.slice(1);\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    var selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(function (col) {\n      return col === SELECTION_COLUMN;\n    }).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter(function (column, index) {\n      return column !== SELECTION_COLUMN || index === selectionColumnIndex;\n    });\n    // Fixed column logic\n    var prevCol = cloneColumns[selectionColumnIndex - 1];\n    var nextCol = cloneColumns[selectionColumnIndex + 1];\n    var mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    var selectionColumn = _defineProperty({\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell\n    }, INTERNAL_COL_DEFINE, {\n      className: \"\".concat(prefixCls, \"-selection-col\")\n    });\n    return cloneColumns.map(function (col) {\n      return col === SELECTION_COLUMN ? selectionColumn : col;\n    });\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"names":["_toConsumableArray","DownOutlined","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","React","useCallback","useMemo","useState","Checkbox","Dropdown","Radio","warning","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","rowSelection","config","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onSelectionChange","onChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","selectionColWidth","columnWidth","selectionType","type","selections","fixed","customizeRenderCell","renderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","tableLocale","locale","getPopupContainer","value","mergedSelectedKeys","setMergedSelectedKeys","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","checkedKeys","halfCheckedKeys","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","slice","Set","derivedHalfSelectedKeySet","lastSelectedKey","setLastSelectedKey","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","Array","from","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref","allDisabled","allDisabledAndChecked","_ref2","allDisabledSomeChecked","_ref3","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref4","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","findIndex","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","selectionColumn","width","columnTitle","render"],"sources":["D:/Projects/React/Portfolio/GeneralStore/client/node_modules/antd/es/table/hooks/useSelection.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\nimport warning from '../../_util/warning';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelection, config) {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => checkStrictly ? {\n    keyEntities: null\n  } : convertDataToEntities(data, {\n    externalGetKey: getRowKey,\n    childrenPropName: childrenColumnName\n  }), [data, getRowKey, checkStrictly, childrenColumnName]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [pageData, childrenColumnName]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key || index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref4 => {\n              let {\n                nativeEvent\n              } = _ref4;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: `${prefixCls}-selection-col`\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}